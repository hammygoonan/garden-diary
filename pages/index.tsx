import client from '@/db';
import { unstable_getServerSession } from 'next-auth';
import Head from 'next/head'
import { Inter } from '@next/font/google'
import Logout from '../components/Logout';
import SignIn from '../components/SignIn';
import { useSession } from 'next-auth/react';
import HomePage from '@/components/HomePage';
import { authOptions } from './api/auth/[...nextauth]';
import { PostData } from '@/types';

const inter = Inter({ subsets: ['latin'] })

type Props = {
  data: PostData[],
};

export default function Home({ data }: Props) {
  const { data: session } = useSession();

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container max-w-64 mx-auto my-8">
        {session && <>
          <Logout session={session} />
          <HomePage data={data} />
        </>
        }
        {!session && <SignIn />}
      </main>
    </>
  )
}

export async function getServerSideProps(context: any) {
  const session = await unstable_getServerSession(context.req, context.res, authOptions);
  if (!session || !session.user) throw Error('not logged in');
  const data = await client.post.findMany({
    where: {
      userId: session.user.id,
    },
    orderBy: [{
      date: 'desc',
    }],
  });
  return {
    props: {
      data: data.map((item) => ({
        ...item,
        date: item.updatedAt.toString(),
        createdAt: item.updatedAt.toString(),
        updatedAt: item.updatedAt.toString(),
      }))
    },
  }
};
